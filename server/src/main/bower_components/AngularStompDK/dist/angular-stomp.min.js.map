{"version":3,"sources":["angular-stomp.es6.js"],"names":["_createClass","defineProperties","target","props","key","prop","configurable","value","writable","Object","Constructor","protoProps","staticProps","prototype","_classCallCheck","instance","TypeError","ngstompProvider","this","settings","credential","login","password","url","_url","_urlWrapper","_x","apply","arguments","toString","class","clazz","setting","settingsObject","debug","boolean","vhost","host","heartbeat","outgoing","undefined","incoming","$get","$q","$log","$rootScope","Stomp","ngStompWebSocket","connect","_this","$setConnection","stompClient","deferred","resolve","$digestStompAction","reject","promiseResult","subscribe","callback","header","scope","then","$stompSubscribe","unRegisterScopeOnDestroy","subscribeTo","topic","SubscribeBuilder","unsubscribe","$stompUnSubscribe","send","queue","data","sendDeffered","defer","JSON","stringify","promise","disconnect","disconnectionPromise","self","subscription","connections","push","indexToRemove","i","len","length","splice","$$phase","$apply","over","client","angular","noop","isDefined","isFunction","$on","ngStomp","aCallback","headers","withHeaders","bindTo","aScope","build","and","module","provider","constant","window"],"mappings":"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","file":"angular-stomp.min.js","sourcesContent":["/*import angular from 'angular';\nimport Stomp from 'stomp-client';*/\n\nclass ngstompProvider {\n\n    constructor() {\n        this.settings = {};\n    }\n\n    credential(login, password) {\n        this.settings.login = login;\n        this.settings.password = password;\n        return this;\n    }\n\n    url(url) {\n        this.settings.url = url;\n        return this;\n    }\n\n    class(clazz) {\n        this.settings.class = clazz;\n        return this;\n    }\n\n    setting(settingsObject) {\n        this.settings = settingsObject;\n        return this;\n    }\n\n    debug(boolean) {\n        this.settings.debug = boolean;\n        return this;\n    }\n\n    vhost(host) {\n        this.settings.vhost = host;\n        return this;\n    }\n\n    heartbeat(outgoing = 10000, incoming = 10000) {\n        this.settings.heartbeat = {\n            outgoing : outgoing,\n            incoming : incoming\n        };\n        return this;\n    }\n\n    /* @ngInject */\n    $get($q, $log, $rootScope, Stomp) {\n        return new ngStompWebSocket(this.settings, $q, $log, $rootScope, Stomp);\n    }\n}\n\nclass ngStompWebSocket {\n\n    /*@ngNoInject*/\n    constructor(settings, $q, $log, $rootScope, Stomp) {\n        this.settings = settings;\n        this.$q = $q;\n        this.$rootScope = $rootScope;\n        this.$log = $log;\n        this.Stomp = Stomp;\n\n        this.connect();\n    }\n\n    connect() {\n        this.$setConnection();\n        this.stompClient.connect(\n            this.settings.login,\n            this.settings.password,\n            () => {\n                this.deferred.resolve();\n                this.$digestStompAction();\n            },\n            () => {\n                this.deferred.reject();\n                this.$digestStompAction();\n            },\n            this.settings.vhost\n        );\n        return this.promiseResult;\n    }\n\n    subscribe(url, callback, header, scope) {\n        this.promiseResult.then(() => {\n            this.$stompSubscribe(url, callback, header || {});\n            this.unRegisterScopeOnDestroy(scope, url);\n        });\n        return this;\n    }\n\n    subscribeTo(topic) {\n        return new SubscribeBuilder(this, topic);\n    }\n\n    unsubscribe(url) {\n        this.promiseResult.then(() => this.$stompUnSubscribe(url));\n        return this;\n    }\n\n    send(queue, data, header) {\n        let sendDeffered = this.$q.defer();\n\n        this.promiseResult.then(() => {\n            this.stompClient.send(queue, header || {}, JSON.stringify(data));\n            sendDeffered.resolve();\n        });\n\n        return sendDeffered.promise;\n    }\n\n    disconnect() {\n        let disconnectionPromise = this.$q.defer();\n        this.stompClient.disconnect(() => {\n            disconnectionPromise.resolve();\n            this.$digestStompAction();\n        });\n\n        return disconnectionPromise.promise;\n    }\n\n    $stompSubscribe(queue, callback, header) {\n        let self = this;\n        let subscription = self.stompClient.subscribe(queue, function() {\n            callback.apply(self.stompClient, arguments);\n            self.$digestStompAction();\n        }, header);\n        this.connections.push({url: queue, subscription: subscription});\n    }\n\n    $stompUnSubscribe(queue) {\n        let indexToRemove = false;\n        for (var i = 0, len = this.connections.length; i < len; i++) {\n            if (this.connections[i].url === queue) {\n                indexToRemove = i;\n                this.connections[i].subscription.unsubscribe();\n                break;\n            }\n        }\n        if (indexToRemove !== false) {\n            this.connections.splice(indexToRemove, 1);\n        }\n    }\n\n    $digestStompAction() {\n        !this.$rootScope.$$phase && this.$rootScope.$apply();\n    }\n\n    $setConnection() {\n        this.stompClient = this.settings.class ? this.Stomp.over(new this.settings.class(this.settings.url)) : this.Stomp.client(this.settings.url);\n        this.stompClient.debug = (this.settings.debug) ? this.$log.debug : angular.noop;\n        if (angular.isDefined(this.settings.heartbeat)) {\n            this.stompClient.heartbeat.outgoing = this.settings.heartbeat.outgoing;\n            this.stompClient.heartbeat.incoming = this.settings.heartbeat.incoming;\n        }\n        this.connections = [];\n        this.deferred = this.$q.defer();\n        this.promiseResult = this.deferred.promise;\n    }\n\n    unRegisterScopeOnDestroy(scope, url) {\n        if (scope !== undefined && angular.isFunction(scope.$on))\n            scope.$on('$destroy', () => this.unsubscribe(url) );\n    }\n}\n\nclass SubscribeBuilder {\n\n    /*@ngNoInject*/\n    constructor(ngStomp, topic) {\n        this.ngStomp = ngStomp;\n        this.topic = topic\n        this.aCallback = angular.noop;\n        this.headers = {};\n        this.scope = {};\n    }\n\n    callback(aCallback) {\n        this.aCallback = aCallback;\n        return this;\n    }\n\n    withHeaders(headers) {\n        this.headers = headers\n        return this;\n    }\n\n    bindTo(aScope) {\n        this.scope = aScope;\n        return this;\n    }\n\n    build() {\n        return this.ngStomp.subscribe(this.topic, this.aCallback, this.headers, this.scope);\n    }\n\n    and() {\n        return this.build();\n    }\n}\n\nangular\n    .module('AngularStompDK', [])\n        .provider('ngstomp', ngstompProvider)\n        .constant('Stomp', window.Stomp);\n"],"sourceRoot":"/source/"}